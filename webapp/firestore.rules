rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /SERVERS/{serv} {
      allow list: if true;
    }

    function allowInputs(inputs) {
      return request.resource.data.keys().hasOnly(inputs);
    }

    function check(inputs) {
      return (
        request.resource.data.keys().hasOnly(inputs)
        && request.resource.data.keys().hasAll(inputs)
      );
    }

    function same(key) {
      return request.resource.data[key] == resource.data[key];
    }

    match /relations/{relation} {
      function isOwner() {
        return get(/databases/$(database)/documents/homes/$(relation.split('@')[0])).data.owner == request.auth.uid;
      }

      function isAdmin() {
        return (
          isOwner()
          || get(/databases/$(database)/documents/relations/$(relation.split('@')[0] + '@' + request.auth.uid)).data.isAdmin == true
        );
      }

      function hasValidInvitation() {
        return get(/databases/$(database)/documents/homes/$(request.resource.data.home)/invitations/$(request.resource.data.invitation)).data.endsOn != null;
      }
      
      function isAdminInHome(home) {
        return (
          get(/databases/$(database)/documents/homes/$(home)).data.owner == request.auth.uid
          || get(/databases/$(database)/documents/relations/$(home + '@' + request.auth.uid)).data.isAdmin == true
        );
      }

      // It's user's relation
      // or user is admin in home
      allow list: if (
        resource.data.user == request.auth.uid
        || isAdminInHome(resource.data.home)
      );

      allow create:
        if resource == null
          && request.resource.data.user == request.auth.uid
          && request.resource.data.isAdmin != false
          && request.auth.token.email_verified
          && relation == request.resource.data.home + '@' + request.resource.data.user
          && (
            (isOwner() && check(['home', 'user', 'displayName', 'isAdmin']))
            || (hasValidInvitation() && check(['home', 'user', 'displayName', 'invitation']))
          );

      // It's user's relation
      allow delete: if request.auth.uid == relation.split('@')[1];

      // If user is owner/admin of relation's home
      allow update: if (
        isAdmin()
        && allowInputs([
          'home', 'user', 'displayName', 'groups',
          'invitation', 'isAdmin', 'notifications'
        ])
        && same('home') && same('user')
        && !('invitation' in resource.data) || same('invitation')
      );

      allow delete: if isAdmin();
    }

    match /homes/{home} {
      allow read: if true;
      allow create:
        if resource == null
          && check(['icon', 'name', 'owner'])
          && request.auth.token.email_verified
          && request.resource.data.owner == request.auth.uid
          && home.matches('^([0-9]|[a-z])*$');

      function getHome() {
        return get(/databases/$(database)/documents/homes/$(home)).data;
      }

      function relation() {
        return get(/databases/$(database)/documents/relations/$(home + '@' + request.auth.uid)).data;
      }

      function isOwner() {
        return getHome().owner == request.auth.uid;
      }

      function isAdmin() {
        return isOwner() || relation().isAdmin == true
      }
      
      allow update: if (
        isAdmin()
        && check(['icon', 'name', 'owner', 'server'])
        && same('owner')
      );

      match /groups/{group} {
        allow read: if (
          group in relation().groups
          || isAdmin()
        );

        allow read, write: if (
          group.matches('^([0-9]|[a-z]|[A-Z])*$')
          && isAdmin()
          && (check(['name', 'displayName', 'pages']) || request.method == 'delete')
        );
      }

      match /pages/{page} {
        allow read: if (
          page in get(/databases/$(database)/documents/homes/$(home)/groups/$(relation().groups[0])).data.pages
          || page in get(/databases/$(database)/documents/homes/$(home)/groups/$(relation().groups[1])).data.pages
          || page in get(/databases/$(database)/documents/homes/$(home)/groups/$(relation().groups[2])).data.pages
        );
        allow list: if isAdmin();
        allow write: if (
          page.matches('^([0-9]|[a-z]|[A-Z])*$')
          && isAdmin()
          && (check(['icon', 'name', 'content']) || request.method == 'delete')
        );
      }
    }
    
    match /users/{userID} {
      match /pushTokens/{tokenID} {
        allow read, write: if request.auth.uid == userID;
      }
    }
  }
}
