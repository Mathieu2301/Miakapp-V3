rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function check(inputs) {
      return (
        request.resource.data.keys().hasOnly(inputs)
        && request.resource.data.keys().hasAll(inputs)
      );
    }

    match /relations/{relation} {
      // It's user's relation
      allow list: if resource.data.user == request.auth.uid

      function isOwner() {
        return get(/databases/$(database)/documents/homes/$(relation.split('@')[0])).data.owner == request.auth.uid;
      }

      function isAdmin() {
        return (
          isOwner()
          || get(/databases/$(database)/documents/relations/$(relation.split('@')[0] + '@' + request.auth.uid)).data.isAdmin == true
        );
      }

      function isValidInvitation() {
        return get(/databases/$(database)/documents/homes/$(request.resource.data.home)/invitations/$(request.resource.data.invitation)).data.endsOn != null;
      }

      allow create:
        if resource == null
          && request.auth.uid == request.resource.data.user
          && relation == request.resource.data.home + '@' + request.resource.data.user
          && (
            (isOwner() && check(['home', 'user', 'isAdmin']))
            || (isValidInvitation() && check(['home', 'user', 'invitation']))
          );

      // It's user's relation
      allow delete: if request.auth.uid == relation.split('@')[1];

      // If user is owner/admin of relation's home
      allow update, delete: if isAdmin();
    }

    match /homes/{home} {
      allow create:
        if resource == null
          && check(['icon', 'name', 'owner'])
          && request.resource.data.owner == request.auth.uid
          && home.matches('^([0-9]|[a-z])*$');

      function relation() {
        return get(/databases/$(database)/documents/relations/$(home + '@' + request.auth.uid)).data;
      }

      function isOwner() {
        return resource.data.owner == request.auth.uid;
      }

      function isAdmin() {
        return isOwner() || relation().isAdmin == true
      }

      allow read: if relation() != null;

      match /groups/{group} {
        allow read: if group in relation().groups;
      }

      match /pages/{page} {
        allow read: if page in get(/databases/$(database)/documents/homes/$(home)/groups/$(relation().groups[0])).data.pages;
      }
    }
  }
}
